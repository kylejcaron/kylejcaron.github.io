---
layout: post
title:  "An easy way to choose a metric"
image: "../../assets/img/placeholder.png"
date: "2025-03-06"
categories:
 - metrics
 - model evaluation
 - time series
---


```{python}
import numpy as np
import matplotlib.pyplot as plt

# Parameters
years = 5  # Number of years
period = 365  # Annual period (days)
t = np.arange(0, years * period)  # Time variable for multiple years

# We add a phase shift to make sure the first peak happens at day 182
seasonality = np.cos(2 * np.pi * (t - 182) / period) 
mu = np.exp( 2*seasonality )
y = np.random.poisson(mu)

df = pd.DataFrame({"demand":mu, "sales":y}, index=pd.date_range("2014-01-01", periods=len(t)))

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(t, mu, label='True Demand', ls='--', color='C3')
# plt.plot(t, y, label='Observed Data', ls='--', color='k')
# plt.scatter(t, y, label='Observed Data', ls='--', color='k', alpha=0.05)
plt.scatter(t, y, label='Observed Data', edgecolor='k', facecolor='none',  alpha=0.25, s=5)


plt.legend()
plt.show()

from sklearn.metrics import mean_absolute_percentage_error as mape, mean_absolute_error as mae, root_mean_squared_error as rmse

import numpy as np

def safe_mape(y, yhat, epsilon=1e-4):
    return np.mean(np.abs((y - yhat) / np.maximum(np.abs(y), epsilon))) * 100

def maep(y, yhat):
    mae = np.mean(np.abs(y - yhat))
    return (mae / np.mean(np.abs(y)))

pd.DataFrame(
    [safe_mape(y, mu), mae(y, mu), rmse(y, mu), maep(y, mu)], 
    index=['mape', 'mae', 'rmse', 'maep']
)



dfW = df.resample("W").sum()
demandW, salesW = dfW['demand'].values, dfW['sales'].values


pd.DataFrame(
    [mape(demandW, salesW), mae(demandW, salesW), rmse(demandW, salesW), maep(demandW, salesW)], 
    index=['mape', 'mae', 'mse', 'maep']
)

# dfW.plot(color=['red', 'k'], alpha=0.8, figsize=(12,5))
ax = dfW[['demand']].plot(color='red', ls='--', alpha=0.75, figsize=(12,5))
dfW[['sales']].plot(color='k',  alpha=0.75, ax=ax)

# plt.title('Seasonal Time Series.')
# plt.xlabel('Days')
# plt.ylabel('Seasonality')
# plt.axvline(x=182, color='r', linestyle='--', label='Peak (Day 182)')
# plt.axvline(x=0, color='b', linestyle='--', label='Trough (Day 0)')
# plt.axvline(x=365, color='b', linestyle='--', label='Trough (Day 365)')
# plt.axvline(x=547, color='r', linestyle='--', label='Peak (Day 547)')
# plt.legend()
# plt.grid(True)
# plt.show()
```